{"version":3,"sources":["components/Today.js","components/Hourly.js","components/Weekly.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Today","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","e","setState","state","handleTemperature","temperature","convertUnixToTime","getWeek","react_default","a","createElement","className","imperialDate","imperialTemperature","imperialHumidity","imperialWindSpeed","imperialSunrise","imperialSunset","metricDate","metricTemperature","metricHumidity","metricWindSpeed","metricSunrise","metricSunset","Component","Hourly","imperialHour","map","hour","time","apparentTemperature","humidity","windSpeed","metricHour","Weekly","imperialWeek","week","apparentTemperatureHigh","apparentTemperatureHighTime","apparentTemperatureLow","apparentTemperatureLowTime","sunriseTime","sunsetTime","metricWeek","Header","Link","to","API_Key","App","unix_time","date","Date","getHours","getMinutes","substr","mm","getMonth","getDate","position","latitude","longitude","imperialToday","undefined","metricToday","_this2","console","log","navigator","geolocation","getCurrentPosition","pos","crd","coords","objectSpread","err","warn","concat","code","message","enableHighAccuracy","timeout","maximumAge","fetch","then","res","json","daily","data","currently","hourly","_this3","BrowserRouter","Route","exact","path","render","Fragment","components_Today","components_Hourly","components_Weekly","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bf2c9f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Today extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {handleTemperature: false};\n    }\n\n    onClick = (e) => {\n        this.setState(state => ({\n            handleTemperature: !state.handleTemperature\n        }));\n    }\n\n  render() {\n    \n    let temperature;\n    let {convertUnixToTime} = this.props;\n    let {getWeek} = this.props;\n\n    \n    if(this.state.handleTemperature) {\n        temperature =\n        <div className=\"today_info\">\n            <p>Date: {getWeek(this.props.imperialDate)}</p>\n            <p>Temperature: { this.props.imperialTemperature } F</p>\n            <p>Humidity: { this.props.imperialHumidity }</p>\n            <p>Wind Speed: { this.props.imperialWindSpeed } mph</p>\n            <p>Sunrise: { convertUnixToTime(this.props.imperialSunrise) }</p>\n            <p>Sunset: { convertUnixToTime(this.props.imperialSunset) }</p>\n        </div> \n               \n    }else {\n        temperature=\n        <div className=\"today_info\">\n            <p>Date: {getWeek(this.props.metricDate)}</p>\n            <p>Temperature: { this.props.metricTemperature } C</p>\n            <p>Humidity: { this.props.metricHumidity }</p>\n            <p>Wind Speed: { this.props.metricWindSpeed } m/s</p>\n            <p>Sunrise: { convertUnixToTime(this.props.metricSunrise) }</p>\n            <p>Sunset: { convertUnixToTime(this.props.metricSunset) }</p>\n        </div>\n    }\n\n    return (\n        <div>\n            <button onClick={this.onClick} className=\"button\">\n                Change temperature unit to\n                {this.state.handleTemperature ? ' Celsius' : ' Fahrenheit'}\n            </button>\n            {temperature}\n        </div>\n    )\n  }\n}\n\nexport default Today;\n","import React, { Component } from 'react'\n\nclass Hourly extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {handleTemperature: false};\n  }\n  \n  onClick = (e) => {\n    this.setState(state => ({\n        handleTemperature: !state.handleTemperature\n    }));\n  }\n  \n  render() {\n    \n    const {convertUnixToTime} = this.props;\n\n    let temperature;\n\n    if(this.state.handleTemperature) {\n      temperature =\n      <div>\n      {this.props.imperialHour.map(hour => \n        <div className=\"hour_grid\">\n          <p className=\"hour_item\">Time {convertUnixToTime(hour.time)} Temperature: {hour.apparentTemperature}F Humidity: {hour.humidity} Wind Speed: {hour.windSpeed} mph</p>\n        </div>\n      )}\n      </div>\n\n    } else {\n      temperature =\n      <div>\n        {this.props.metricHour.map(hour => \n          <div className=\"hour_grid\">\n            <p className=\"hour_item\">Time: {convertUnixToTime(hour.time)} Temperature: {hour.apparentTemperature}C Humidity: {hour.humidity} Wind Speed: {hour.windSpeed} m/s</p>\n          </div>\n        )}\n      </div>  \n  }\n\n    return (\n      <div>\n      <button onClick={this.onClick} className=\"button\">\n          Change temperature unit to\n          {this.state.handleTemperature ? ' Celsius' : ' Fahrenheit'}\n      </button>\n      {temperature}\n      </div>\n    )\n  }\n}\n\nexport default Hourly;\n\n","import React, { Component } from 'react'\n\nclass Weekly extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {handleTemperature: false};\n  }\n  \n  onClick = (e) => {\n    this.setState(state => ({\n        handleTemperature: !state.handleTemperature\n    }));\n}\n\n  render() {\n    const {convertUnixToTime} = this.props;\n    const {getWeek} = this.props;\n    let temperature;\n\n    if(this.state.handleTemperature) {\n      temperature =\n    <div className=\"week_grid\">\n        {this.props.imperialWeek.map(week =>\n          <ul>\n            <li className=\"week_item\">Date: {getWeek(week.time)}</li>\n            <li className=\"week_item\">Highest Temperature: {week.apparentTemperatureHigh} F At Time: {convertUnixToTime(week.apparentTemperatureHighTime)}</li>\n            <li className=\"week_item\">Lowest Temperature: {week.apparentTemperatureLow} F At Time: {convertUnixToTime(week.apparentTemperatureLowTime)}</li>\n            <li className=\"week_item\">Humidity: {week.humidity}</li>\n            <li className=\"week_item\">Wind Speed: {week.windSpeed} mph</li>\n            <li className=\"week_item\">Sunrise: {convertUnixToTime(week.sunriseTime)}</li>\n            <li className=\"week_item\">Sunset: {convertUnixToTime(week.sunsetTime)}</li>\n          </ul>\n        )}\n    </div>\n  } else {\n      temperature=\n    <div className=\"week_grid\">\n        {this.props.metricWeek.map(week =>\n        <div className=\"weekday\">\n          <ul>\n            <li className=\"week_item\">Date: {getWeek(week.time)}</li>\n            <li className=\"week_item\">Highest Temperature: {week.apparentTemperatureHigh} C At Time: {convertUnixToTime(week.apparentTemperatureHighTime)}</li>\n            <li className=\"week_item\">Lowest Temperature: {week.apparentTemperatureLow} C At Time: {convertUnixToTime(week.apparentTemperatureLowTime)}</li>\n            <li className=\"week_item\">Humidity: {week.humidity}</li>\n            <li className=\"week_item\">Wind Speed: {week.windSpeed} m/s</li>\n            <li className=\"week_item\">Sunrise: {convertUnixToTime(week.sunriseTime)}</li>\n            <li className=\"week_item\">Sunset: {convertUnixToTime(week.sunsetTime)}</li>\n          </ul>\n        </div>\n        )}\n    </div>\n  }\n\n    return (\n      <div>\n      <button onClick={this.onClick} className=\"button\">\n        Change temperature unit to\n        {this.state.handleTemperature ? ' Celsius' : ' Fahrenheit'}\n      </button>\n      {temperature}       \n      </div>\n    )\n  }\n}\n\n\nexport default Weekly;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n  return (\n    \n    <header className=\"header\">\n      <h1>IN Weather</h1>\n      <Link className=\"nav_link\" to=\"/\">Home</Link>\n      <Link className=\"nav_link\" to=\"/hourly\">Hourly Prognosis</Link>\n      <Link className=\"nav_link\" to=\"/weekly\">Weekly Prognosis</Link>\n    </header>\n\n  )\n}\n","import React, { Component } from 'react';\n\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\n\nimport Today from './components/Today';\nimport Hourly from './components/Hourly';\nimport Weekly from './components/Weekly';\nimport Header from './components/Header';\n\nimport './App.css';\n\nconst API_Key = 'b443f236d24543bcc8da066a299a2d99';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n        position: {\n          latitude: 59.414141,\n          longitude: 18.020202\n        },\n        imperialToday: {\n        imperialDate: undefined,\n        imperialTemperature: undefined,\n        imperialHumidity: undefined,\n        imperialWindSpeed: undefined,\n        imperialSunrise: undefined,\n        imperialSunset: undefined,\n        },\n        \n        imperialWeek: [],\n        imperialHour: [],\n        \n        metricToday: {\n        metricDate: undefined,\n        metricTemperature: undefined,\n        metricHumidity: undefined,\n        metricWindSpeed: undefined,\n        metricSunrise: undefined,\n        metricSunset: undefined,\n        },\n        metricWeek: [],\n        metricHour: [] \n    }\n}\n\nconvertUnixToTime = (unix_time) => {\n  let date = new Date(unix_time * 1000);\n  let hours = date.getHours();\n  let minutes = \"0\" + date.getMinutes();\n  return hours + ':' + minutes.substr(-2);\n}\n\ngetWeek = (unix_time) => {\n  let date = new Date(unix_time * 1000);\n  let mm = (date.getMonth() + 1);\n  let dd = date.getDate();\n  return dd + '/' + mm;\n}\n\n\n componentDidMount() {\n   console.log(this.state);\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 10000,\n    maximumAge: 0\n  };\n  \n  const success = (pos) => {\n    var crd = pos.coords;\n    this.setState({\n      ...this.state, position: {\n        latitude: crd.latitude,\n        longitude: crd.longitude\n      }\n    })\n    \n   }\n\n    \n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n  navigator.geolocation.getCurrentPosition(success, error, options);\n\n  fetch(`https://hendrik-cors-proxy.herokuapp.com/https://api.darksky.net/forecast/${API_Key}/${this.state.position.latitude},${this.state.position.longitude}`)\n   .then(res => res.json())\n   .then(res => {\n      this.setState({\n          imperialToday: {  \n            imperialDate: res.daily.data[0].time,\n            imperialTemperature: res.currently.temperature,\n            imperialHumidity: res.currently.humidity,\n            imperialWindSpeed: res.currently.windSpeed,\n            imperialSunrise: res.daily.data[0].sunriseTime,\n            imperialSunset: res.daily.data[0].sunsetTime,\n          },\n          imperialWeek: res.daily.data,\n          imperialHour: res.hourly.data\n        })\n      })\n  fetch(`https://hendrik-cors-proxy.herokuapp.com/https://api.darksky.net/forecast/${API_Key}/${this.state.position.latitude},${this.state.position.longitude}?units=si`)    \n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          metricToday: {\n            metricDate: res.daily.data[0].time,\n            metricTemperature: res.currently.temperature,\n            metricHumidity: res.currently.humidity,\n            metricWindSpeed: res.currently.windSpeed,\n            metricSunrise: res.daily.data[0].sunriseTime,\n            metricSunset: res.daily.data[0].sunsetTime,\n          },\n          \n          metricWeek: res.daily.data,\n          metricHour: res.hourly.data, \n        })\n      })\n\n  }\n\n\n\n  render() {\n    return (\n      <Router>\n      <div className=\"App\">\n      <Header />\n      <Route exact path=\"/\" render={props => (\n        <React.Fragment>\n          <Today\n              convertUnixToTime={this.convertUnixToTime}\n              getWeek={this.getWeek}\n\n              imperialDate={this.state.imperialToday.imperialDate}\n              imperialTemperature={this.state.imperialToday.imperialTemperature}\n              imperialHumidity={this.state.imperialToday.imperialHumidity}\n              imperialWindSpeed={this.state.imperialToday.imperialWindSpeed}\n              imperialSunrise={this.state.imperialToday.imperialSunrise}\n              imperialSunset={this.state.imperialToday.imperialSunset}\n\n              metricDate={this.state.metricToday.metricDate}\n              metricTemperature={this.state.metricToday.metricTemperature}\n              metricHumidity={this.state.metricToday.metricHumidity}\n              metricWindSpeed={this.state.metricToday.metricWindSpeed}\n              metricSunrise={this.state.metricToday.metricSunrise}\n              metricSunset={this.state.metricToday.metricSunset}\n              \n          />\n        </React.Fragment>\n      )} />\n      <Route exact path=\"/hourly\" render={props => (\n        <Hourly \n        imperialHour={this.state.imperialHour}\n        metricHour={this.state.metricHour} \n        convertUnixToTime={this.convertUnixToTime} \n        \n        />\n      )} />  \n      <Route exact path=\"/weekly\" render={props => (\n        <Weekly \n        imperialWeek={this.state.imperialWeek}\n        metricWeek={this.state.metricWeek} \n        convertUnixToTime={this.convertUnixToTime} \n        getWeek={this.getWeek}\n        />\n      )} />\n       \n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}